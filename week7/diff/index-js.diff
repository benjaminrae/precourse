2a3,4
>   element;
>   isMade = false;
4,5c6,7
<   constructor(length) {
<     this.letters = new Array(length).fill({}).map(() => ({
---
>   constructor(element = document.createElement('ul')) {
>     this.letters = new Array(element.children.length).fill({}).map(() => ({
8a11
>       isFilled: false,
10a14
>     this.element = element;
13,14c17,60
<   printAttempt() {
<     const printableLetters = this.letters.map((letter) => {
---
>   fillAttempt(guessedWord) {
>     this.element.children.forEach((child, index) => {
>       child.textContent = guessedWord[index];
>     });
>   }
> 
>   addNextLetter(letter) {
>     const nextEmptyLetter = this.letters.find((letter) => !letter.character);
> 
>     if (nextEmptyLetter === undefined) {
>       return;
>     }
> 
>     nextEmptyLetter.character = letter;
>     nextEmptyLetter.isFilled = true;
> 
>     this.render();
>   }
> 
>   deleteLastLetter() {
>     const lastLetterIndex = this.letters.findIndex(
>       (letter) => !letter.character
>     );
> 
>     if (lastLetterIndex === 0) {
>       return;
>     }
> 
>     if (lastLetterIndex === -1) {
>       this.letters[this.letters.length - 1].character = '';
>       this.render();
>       return;
>     }
> 
>     this.letters[lastLetterIndex - 1].character = '';
>     this.letters[lastLetterIndex - 1].isFilled = false;
> 
>     this.render();
>   }
> 
>   render() {
>     this.letters.forEach((letter, index) => {
>       this.element.children[index].textContent = letter.character;
> 
16c62,63
<         return { letter: letter.character, color: 'ðŸŸ©' };
---
>         this.element.children[index].classList.add('correct');
>         return;
20c67,68
<         return { letter: letter.character, color: 'ðŸŸ¨' };
---
>         this.element.children[index].classList.add('included');
>         return;
24c72,73
<         return { letter: letter.character, color: 'ðŸŸ¥' };
---
>         this.element.children[index].classList.add('incorrect');
>         return;
27c76,79
<       return { letter: letter.character, color: 'â¬œ' };
---
>       if (letter.isFilled) {
>         this.element.children[index].classList.add('filled');
>         return;
>       }
29,30d80
< 
<     console.table(printableLetters);
33c83,88
<   makeAttempt(guessedWord, wordOfTheDay) {
---
>   makeAttempt(wordOfTheDay) {
>     if (this.letters.some((letter) => !letter.character)) {
>       return;
>     }
> 
>     this.isMade = true;
35d89
<       letter.character = guessedWord[index];
40a95,96
> 
>         return;
44a101
>         letter.isCorrect = false;
47d103
<   }
49,50c105
<   checkIsCorrect() {
<     return this.letters.every((letter) => letter.isCorrect);
---
>     this.render();
52d106
< }
54,55c108,112
< const getUserGuess = (maximumLength) => {
<   const userGuess = prompt('Guess your word');
---
>   printAttempt() {
>     const printableLetters = this.letters.map((letter) => {
>       if (letter.isCorrect) {
>         return { letter: letter.character, color: 'ðŸŸ©' };
>       }
57,59c114,125
<   if (!userGuess) {
<     alert('You must guess a word!');
<     return getUserGuess(maximumLength);
---
>       if (letter.isIncluded) {
>         return { letter: letter.character, color: 'ðŸŸ¨' };
>       }
> 
>       if (letter.isGuessed) {
>         return { letter: letter.character, color: 'ðŸŸ¥' };
>       }
> 
>       return { letter: letter.character, color: 'â¬œ' };
>     });
> 
>     console.table(printableLetters);
62,64c128,129
<   if (userGuess.length !== maximumLength) {
<     alert(`You must guess a word with ${maximumLength} letters!`);
<     return getUserGuess(maximumLength);
---
>   checkIfCorrect() {
>     return this.letters.every((letter) => letter.isCorrect);
67,69c132,133
<   if (!/^[a-zA-Z]+$/.test(userGuess)) {
<     alert('Invalid word! Please enter only alphabetic characters!');
<     return getUserGuess(maximumLength);
---
>   checkIfIsMade() {
>     return this.isMade;
70a135
> }
72c137,140
<   return userGuess;
---
> const pickWordOfTheDay = (fiveLetterWords) => {
>   const randomIndex = Math.floor(Math.random() * fiveLetterWords.length);
> 
>   return fiveLetterWords[randomIndex];
75,77c143,144
< const getWordOfTheDay = (wordsToGuess, usedWordsOfTheDay) => {
<   const randomIndex = Math.floor(Math.random() * wordsToGuess.length);
<   const wordOfTheDay = wordsToGuess[randomIndex];
---
> const getWordOfTheDay = (fiveLetterWords, usedWordsOfTheDay) => {
>   const wordOfTheDay = pickWordOfTheDay(fiveLetterWords);
80c147
<     return getWordOfTheDay(wordsToGuess, usedWordsOfTheDay);
---
>     return getWordOfTheDay(fiveLetterWords, usedWordsOfTheDay);
87a155,162
> const createAttemptsTable = (maximumAttempts, maximumCharacters) => {
>   const attempts = new Array(maximumAttempts).fill(
>     () => new Attempt(maximumCharacters)
>   );
> 
>   return attempts;
> };
> 
94,100c169,170
< const playWordle = () => {
<   const wordsToGuess = ['hello', 'world'];
<   const usedWordsOfTheDay = [];
<   const maximumAttempts = 6;
<   const maximumCharacters = 5;
<   let currentAttemptIndex = 0;
<   let hasWon = false;
---
> const getUserGuess = () => {
>   const guessedWord = prompt('Guess a word!');
102,104c172,222
<   alert(
<     "Hello, welcome to Wordle! If you don't know how to play, ask your Grandmother"
<   );
---
>   if (!guessedWord) {
>     alert('You must guess a word!');
>     return getUserGuess();
>   }
> 
>   if (guessedWord.length !== 5) {
>     alert('You must guess a word with 5 letters!');
>     return getUserGuess();
>   }
> 
>   if (!/^[a-zA-Z]+$/.test(guessedWord)) {
>     alert('Invalid word! Please enter only alphabetic characters.');
>     return getUserGuess();
>   }
> 
>   return guessedWord.toLocaleLowerCase();
> };
> 
> const checkIfPlaying = (hasWon, currentAttempts, maximumAttempts) => {
>   if (hasWon) {
>     return false;
>   }
> 
>   if (currentAttempts === maximumAttempts) {
>     return false;
>   }
> 
>   return confirm('Do you want to continue playing?');
> };
> 
> const registerKeyboardEvents = (attempts, wordOfTheDay) => {
>   const keys = document.querySelectorAll('.key');
>   keys.forEach((key) => {
>     const eventListener = keyboardClickHandler(attempts, wordOfTheDay);
> 
>     key.addEventListener('click', eventListener);
>   });
> };
> 
> const keyboardClickHandler = (attempts, wordOfTheDay) => {
>   return (event) => {
>     const key = event.target.textContent;
> 
>     if (attempts.some((attempt) => attempt.checkIfCorrect())) {
>       return;
>     }
> 
>     const attempt = attempts.find((attempt) => !attempt.checkIfIsMade());
> 
>     if (key === 'enter') {
>       attempt.makeAttempt(wordOfTheDay);
106c224,230
<   const wordOfTheDay = getWordOfTheDay(wordsToGuess, usedWordsOfTheDay);
---
>       if (attempt.checkIfCorrect()) {
>         removeKeyboardEvents(attempts, wordOfTheDay);
>       }
> 
>       if (attempts.every((attempt) => attempt.checkIfIsMade())) {
>         removeKeyboardEvents(attempts, wordOfTheDay);
>       }
108,110c232,233
<   const attempts = new Array(maximumAttempts)
<     .fill(null)
<     .map(() => new Attempt(maximumCharacters));
---
>       return;
>     }
112c235,239
<   printAttempts(attempts);
---
>     if (key === 'del') {
>       attempt.deleteLastLetter();
>       printAttempts(attempts);
>       return;
>     }
114,115c241,243
<   do {
<     const userGuess = getUserGuess(maximumCharacters);
---
>     attempt.addNextLetter(key);
>   };
> };
117,119c245,248
<     const attempt = attempts[currentAttemptIndex];
<     attempt.makeAttempt(userGuess, wordOfTheDay);
<     hasWon = attempt.checkIsCorrect();
---
> const removeKeyboardEvents = (attempts, wordOfTheDay) => {
>   const keys = document.querySelectorAll('.key');
>   keys.forEach((key) => {
>     const eventListener = keyboardClickHandler(attempts, wordOfTheDay);
121,122c250,262
<     console.clear();
<     printAttempts(attempts);
---
>     key.removeEventListener('click', eventListener);
>   });
> };
> 
> const playWordle = () => {
>   const fiveLetterWords = ['hello', 'world'];
>   const usedWordsOfTheDay = [];
> 
>   const attempts = Array.from(document.querySelectorAll('.attempt')).map(
>     (attempt) => {
>       return new Attempt(attempt);
>     }
>   );
124,125c264
<     currentAttemptIndex++;
<   } while (!hasWon && currentAttemptIndex < 6);
---
>   const wordOfTheDay = getWordOfTheDay(fiveLetterWords, usedWordsOfTheDay);
127c266
<   alert('Come back tomorrow for a new word!');
---
>   registerKeyboardEvents(attempts, wordOfTheDay);
